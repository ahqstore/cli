name: Publish CLI on NodeJS & Cargo

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  publish-raw-npm:
    strategy:
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.platform }}

    name: Build & Publish raw cli

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.com

      - name: Fetch ARM target
        uses: actions/github-script@v7
        id: arm
        with:
          result-encoding: string
          script: |
            const { platform } = require("process");
            if (platform == "win32") {
              return "i686-pc-windows-msvc"
            } else if (platform == "darwin") {
              return "aarch64-apple-darwin"
            } else {
              return "aarch64-unknown-linux-gnu"
            }

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ steps.arm.outputs.result }}

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "cli-rs -> target"

      - name: Linux Setup ARM
        run: sudo apt update; sudo apt install gcc-aarch64-linux-gnu --fix-missing
        if: matrix.platform == 'ubuntu-latest'

      - name: Install nj cli
        run: cargo install nj-cli
        working-directory: cli-rs

      - name: Build Node
        run: nj-cli build --release -- --features node
        env:
          TSLINK_BUILD: "true"
        working-directory: cli-rs

      - name: Finalize
        run: node finalize.js
        working-directory: cli-rs

      - name: Publish
        run: npm publish --scope ahqstore --access public --verbose
        working-directory: cli-rs/dist
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          token: ${{ secrets.NPM_TOKEN }}

      - name: Build Node (ARM/i686)
        run: nj-cli build --target ${{ steps.arm.outputs.result }} --release -- --features node
        env:
          TSLINK_BUILD: "true"
        working-directory: cli-rs

      - name: Finalize ARM/i686
        run: node finalize.js
        working-directory: cli-rs
        env:
          arch: arm64

      - name: Publish ARM/i686
        run: npm publish --scope ahqstore --access public --verbose
        working-directory: cli-rs/dist
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          token: ${{ secrets.NPM_TOKEN }}

  publish-cargo:
    name: Build & Publish cli to cargo

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish Rust Binary
        run: cargo publish
        working-directory: cli-rs
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}

  publish:
    needs: [publish-raw-npm]
    name: Build & Publish CLI to npm

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: latest
          registry-url: https://registry.npmjs.com

      - name: Install Deps
        run: npm install
        working-directory: cli-js

      - name: Publish
        run: npm publish --scope ahqstore --access public --verbose
        working-directory: cli-js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          token: ${{ secrets.NPM_TOKEN }}
